<!-- LongTermDemo BPEL Process [Generated by the Eclipse BPEL Designer] -->
<!-- Date: Wed Apr 29 11:57:08 KST 2015 -->
<bpel:process name="LongTermDemo"
         targetNamespace="kr.co.smartylab"
         suppressJoinFailure="yes"
         xmlns:tns="kr.co.smartylab"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns="http://smartylab.co.kr/products/op/adapter" xmlns:ns1="http://www.w3.org/2001/XMLSchema">

    <!-- Import the client WSDL -->
    <bpel:import namespace="http://smartylab.co.kr/products/op/adapter" location="adapter.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"></bpel:import>
    <bpel:import location="LongTermDemoArtifacts.wsdl" namespace="kr.co.smartylab" 
	        importType="http://schemas.xmlsoap.org/wsdl/" />
         
    <!-- ================================================================= -->         
    <!-- PARTNERLINKS                                                      -->
    <!-- List of services participating in this BPEL process               -->
    <!-- ================================================================= -->         
    <bpel:partnerLinks>
        <!-- The 'client' role represents the requester of this service. -->
        <bpel:partnerLink name="client"
                     partnerLinkType="tns:LongTermDemo"
                     myRole="LongTermDemoProvider"
                     />
        <bpel:partnerLink name="ConcertAdapterPL" partnerLinkType="tns:ConcertAdapterPLT" partnerRole="ConcertAdapterPLTRole"></bpel:partnerLink>
    </bpel:partnerLinks>
  
    <!-- ================================================================= -->         
    <!-- VARIABLES                                                         -->
    <!-- List of messages and XML documents used within this BPEL process  -->
    <!-- ================================================================= -->         
    <bpel:variables>
        <!-- Reference to the message passed as input during initiation -->
        <bpel:variable name="resourceAllocationRequest"
                  messageType="tns:LongTermDemoRequestMessage"/>
                  
        <!-- 
          Reference to the message that will be returned to the requester
          -->
        <bpel:variable name="resourceAllocationResponse"
                  messageType="tns:LongTermDemoResponseMessage"/>
        <bpel:variable name="ResourceAllocationResponse" messageType="ns:invoke_adapterOutput"></bpel:variable>
        <bpel:variable name="ResourceAllocationRequest" messageType="ns:invoke_adapterInput"></bpel:variable>
        <bpel:variable name="SendServiceMsgRequest" messageType="tns:sendServiceMsgRequest"></bpel:variable>
        <bpel:variable name="ServiceMsgResponse" messageType="ns:send_service_msgOutput"></bpel:variable>
        <bpel:variable name="ServiceMsgRequest" messageType="ns:send_service_msgInput"></bpel:variable>
        <bpel:variable name="ResourceReleaseResponse" messageType="ns:release_allocated_resourcesOutput"></bpel:variable>
        <bpel:variable name="ResourceReleaseRequest" messageType="ns:release_allocated_resourcesInput"></bpel:variable>
        <bpel:variable name="SendServiceMsgResponse" messageType="tns:sendServiceMsgResponse"></bpel:variable>
        <bpel:variable name="SendActionMsgRequest" messageType="tns:sendActionMsgRequest"></bpel:variable>
        <bpel:variable name="ActionMsgResponse" messageType="ns:send_action_msgOutput"></bpel:variable>
        <bpel:variable name="ActionMsgRequest" messageType="ns:send_action_msgInput"></bpel:variable>
        <bpel:variable name="SendActionMsgResponse" messageType="tns:sendActionMsgResponse"></bpel:variable>
        <bpel:variable name="ActionResultSetRequest" messageType="tns:onActionResultSetRequest"></bpel:variable>
        <bpel:variable name="ActionResultSetResponse" messageType="tns:onActionResultSetResponse"></bpel:variable>
        <bpel:variable name="RuntimeFaultRequest" messageType="tns:onRuntimeFaultReportRequest"></bpel:variable>
        <bpel:variable name="ActionCancelResponse" messageType="ns:cancel_actionOutput"></bpel:variable>
        <bpel:variable name="ActionCancelRequest" messageType="ns:cancel_actionInput"></bpel:variable>
        <bpel:variable name="RuntimeFaultResponse" messageType="tns:onRuntimeFaultReportResponse"></bpel:variable>
        <bpel:variable name="FalutCode" type="ns1:string"></bpel:variable>
        <bpel:variable name="ServiceResult" type="ns1:string"></bpel:variable>
    </bpel:variables>

    <!-- ================================================================= -->         
    <!-- ORCHESTRATION LOGIC                                               -->
    <!-- Set of activities coordinating the flow of messages across the    -->
    <!-- services integrated within this business process                  -->
    <!-- ================================================================= -->         
    <bpel:sequence name="main">
        
        <!-- Receive input from requester. 
             Note: This maps to operation defined in LongTermDemo.wsdl 
             -->
        
        
        <!-- Generate reply to synchronous request -->
        
        <bpel:pick name="InvokeBP" createInstance="yes">
            <bpel:onMessage partnerLink="client" operation="allocateResource" portType="tns:LongTermDemo" variable="resourceAllocationRequest"><bpel:sequence>
                    <bpel:assign validate="no" name="AssignLinkGraph">
                        
                        
                        <bpel:copy>
                            <bpel:from><bpel:literal xml:space="preserve"><tns:invoke_adapter xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:LinkGraph>
    <tns:name>tns:name</tns:name>
    <tns:nodes>
<tns:Node>
	<tns:id>service_server_app</tns:id>
	<tns:uri>rocon:/*/service_server_node#concert_adapter/service_server_app</tns:uri>
	<tns:parameters>
		<tns:parameter>
			<tns:message>tns:message</tns:message>
			<tns:frequency>0</tns:frequency>
		</tns:parameter>
	</tns:parameters>
	<tns:min>0</tns:min>
	<tns:max>0</tns:max>
</tns:Node>
<tns:Node>
	<tns:id>action_server_app</tns:id>
	<tns:uri>rocon:/*/action_server_node#concert_adapter/action_server_app</tns:uri>
	<tns:parameters>
		<tns:parameter>
			<tns:message>tns:message</tns:message>
			<tns:frequency>0</tns:frequency>
		</tns:parameter>
	</tns:parameters>
	<tns:min>0</tns:min>
	<tns:max>0</tns:max>
</tns:Node>
    </tns:nodes>
    <tns:topics>
    </tns:topics>
    <tns:services>
<tns:Service>
	<tns:id>add_two_int_service</tns:id>
	<tns:type>rospy_tutorials/AddTwoInts</tns:type>
	<tns:persistency>false</tns:persistency>
</tns:Service>
    </tns:services>
    <tns:actions>
<tns:Action>
	<tns:id>fibonacci_action</tns:id>
	<tns:type>actionlib_tutorials/FibonacciAction</tns:type>
	<tns:goal_type>actionlib_tutorials/FibonacciGoal</tns:goal_type>
</tns:Action>
    </tns:actions>
    <tns:edges>
<tns:Edge>
	<tns:start>add_two_int_service</tns:start>
	<tns:finish>service_server_app</tns:finish>
	<tns:remap_from>add_two_ints</tns:remap_from>
	<tns:remap_to>/smartylab/add_two_ints</tns:remap_to>
</tns:Edge>
<tns:Edge>
	<tns:start>fibonacci_action</tns:start>
	<tns:finish>action_server_app</tns:finish>
	<tns:remap_from>fibonacci</tns:remap_from>
	<tns:remap_to>/smartylab/fibonacci</tns:remap_to>
</tns:Edge>
    </tns:edges>
    <tns:methods>
<tns:Method>
	<tns:namespace>kr.co.smartylab</tns:namespace>
	<tns:address>http://127.0.0.1/ode/processes/LongTermDemo</tns:address>
	<tns:name>setActionResult</tns:name>
	<tns:param>tns:param</tns:param>
	<tns:return_name>actionResult</tns:return_name>
</tns:Method>
    </tns:methods>
  </tns:LinkGraph>
</tns:invoke_adapter></bpel:literal></bpel:from>
                            <bpel:to variable="ResourceAllocationRequest" part="parameters"></bpel:to>
                        </bpel:copy>
                        
                    </bpel:assign>
                    <bpel:invoke name="RequestResourceAllocation" partnerLink="ConcertAdapterPL" operation="invoke_adapter" portType="ns:concert_adapter_soap_serverPortType" inputVariable="ResourceAllocationRequest" outputVariable="ResourceAllocationResponse"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignAllocationResult">
                        <bpel:copy>
                            <bpel:from part="parameters" variable="ResourceAllocationResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:out]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="payload" variable="resourceAllocationResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:result]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    <bpel:reply name="ReplyAllocationResult" partnerLink="client" operation="allocateResource" portType="tns:LongTermDemo" variable="resourceAllocationResponse"></bpel:reply>
                </bpel:sequence>
            
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="sendServiceMsg" portType="tns:LongTermDemo" variable="SendServiceMsgRequest">
                <bpel:sequence><bpel:assign validate="no" name="AssignServiceMsgParams">
                        
                        <bpel:copy>
                            <bpel:from><bpel:literal><tns:send_service_msg xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:callback_method_id>tns:callback_method_id</tns:callback_method_id>
  <tns:namespace>tns:namespace</tns:namespace>
  <tns:message_val>tns:message_val</tns:message_val>
</tns:send_service_msg>
</bpel:literal></bpel:from>
                            <bpel:to part="parameters" variable="ServiceMsgRequest"></bpel:to>
                        </bpel:copy>
                        
                        <bpel:copy>
                            <bpel:from part="parameters" variable="SendServiceMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:namespace]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="ServiceMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:namespace]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                            <bpel:from part="parameters" variable="SendServiceMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:message_val]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="ServiceMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:message_val]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                            <bpel:from part="parameters" variable="SendServiceMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:callback_method_id]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="ServiceMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:callback_method_id]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                        
                    </bpel:assign>
                    <bpel:invoke name="RequestToSendServiceMsg" partnerLink="ConcertAdapterPL" operation="send_service_msg" portType="ns:concert_adapter_soap_serverPortType" inputVariable="ServiceMsgRequest" outputVariable="ServiceMsgResponse"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignServiceResult">
                        <bpel:copy>
                            <bpel:from part="parameters" variable="ServiceMsgResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:out]]></bpel:query>
                            </bpel:from>
                            <bpel:to variable="ServiceResult"></bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    <bpel:if name="If">
                        <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[string(ServiceResult)=string("14")]]></bpel:condition>
                        <bpel:sequence>
                            <bpel:invoke name="RequestToReleaseResources" partnerLink="ConcertAdapterPL" operation="release_allocated_resources" portType="ns:concert_adapter_soap_serverPortType" inputVariable="ResourceReleaseRequest" outputVariable="ResourceReleaseResponse"></bpel:invoke>
                            <bpel:assign validate="no" name="AssignReleaseResult">
                                <bpel:copy>
                                    <bpel:from part="parameters" variable="ResourceReleaseResponse">
                                        <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:out]]></bpel:query>
                                    </bpel:from>
                                    <bpel:to part="parameters" variable="SendServiceMsgResponse">
                                        <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:serviceResponse]]></bpel:query>
                                    </bpel:to>
                                </bpel:copy>
                            </bpel:assign>
                            <bpel:reply name="Reply" partnerLink="client" operation="sendServiceMsg" portType="tns:LongTermDemo" variable="SendServiceMsgResponse"></bpel:reply>
                        </bpel:sequence>
                        <bpel:else>
                            <bpel:sequence>
                                <bpel:assign validate="no" name="Assign">
                                    <bpel:copy>
                                        <bpel:from variable="ServiceResult"></bpel:from>
                                        <bpel:to part="parameters" variable="SendServiceMsgResponse">
                                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:serviceResponse]]></bpel:query>
                                        </bpel:to>
                                    </bpel:copy>
                                </bpel:assign>
                                <bpel:reply name="ReplyServiceResult" partnerLink="client" operation="sendServiceMsg" portType="tns:LongTermDemo" variable="SendServiceMsgResponse"></bpel:reply>
                            </bpel:sequence>
                        </bpel:else>
                    </bpel:if>
                
                </bpel:sequence>
            
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="sendActionMsg" portType="tns:LongTermDemo" variable="SendActionMsgRequest">
                <bpel:sequence><bpel:assign validate="no" name="AssignActionMsgParams">
                        <bpel:copy>
                            <bpel:from part="parameters" variable="SendActionMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:namespace]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="ActionMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:namespace]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                            <bpel:from part="parameters" variable="SendActionMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:message_val]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="ActionMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:message_val]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                            <bpel:from part="parameters" variable="SendActionMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:callback_method_id]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="ActionMsgRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:callback_method_id]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    <bpel:invoke name="RequestToSendActionMsg" partnerLink="ConcertAdapterPL" operation="send_action_msg" portType="ns:concert_adapter_soap_serverPortType" inputVariable="ActionMsgRequest" outputVariable="ActionMsgResponse"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignActionMsgSendingResult">
                        <bpel:copy>
                            <bpel:from part="parameters" variable="ActionMsgResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:out]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="SendActionMsgResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:actionResponse]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    <bpel:reply name="ReplyActionMsgSendingResult" partnerLink="client" operation="sendActionMsg" portType="tns:LongTermDemo" variable="SendActionMsgResponse"></bpel:reply>
                
                </bpel:sequence>
            
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="onActionResultSet" portType="tns:LongTermDemo" variable="ActionResultSetRequest">
                <bpel:sequence><bpel:invoke name="ReleaseResources" partnerLink="ConcertAdapterPL" operation="release_allocated_resources" portType="ns:concert_adapter_soap_serverPortType" inputVariable="ResourceReleaseRequest" outputVariable="ResourceReleaseResponse"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignActionResultSet">
                        <bpel:copy>
                            <bpel:from part="parameters" variable="ActionResultSetRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:actionResultSet]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="SendActionMsgResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:actionResponse]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    
                    <bpel:reply name="ReplyActionResultSetToClient" partnerLink="client" operation="sendActionMsg" portType="tns:LongTermDemo" variable="SendActionMsgResponse"></bpel:reply>
                    <bpel:assign validate="no" name="AssignResponseToAdapter">
                        <bpel:copy>
                            <bpel:from><bpel:literal xml:space="preserve"><tns:onActionResultSetResponse xmlns:tns="kr.co.smartylab" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:actionResultResponse>OK</tns:actionResultResponse>
</tns:onActionResultSetResponse>
</bpel:literal></bpel:from>
                            <bpel:to variable="ActionResultSetResponse" part="parameters"></bpel:to>
                        </bpel:copy>
                        
                    </bpel:assign>
                    <bpel:reply name="ReplyToAdapter" partnerLink="client" operation="onActionResultSet" portType="tns:LongTermDemo" variable="ActionResultSetResponse"></bpel:reply>
                
                </bpel:sequence>
            
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="onRuntimeFaultReport" portType="tns:LongTermDemo" variable="RuntimeFaultRequest"><bpel:sequence>
                    <bpel:assign validate="no" name="AssignFaultCode">
                        <bpel:copy>
                            <bpel:from part="parameters" variable="RuntimeFaultRequest">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:runtimeFaultMsg]]></bpel:query>
                            </bpel:from>
                            <bpel:to variable="FalutCode"></bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    <bpel:if name="If1"><bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[string(FalutCode)=string("RappNotAvailableFault")]]></bpel:condition>
                    <bpel:sequence>
                        <bpel:invoke name="ReleaseResources" partnerLink="ConcertAdapterPL" operation="release_allocated_resources" portType="ns:concert_adapter_soap_serverPortType" inputVariable="ResourceReleaseRequest" outputVariable="ResourceReleaseResponse"></bpel:invoke>
                        <bpel:exit name="TerminateBP"></bpel:exit>
                    </bpel:sequence>
                    <bpel:else>
                        <bpel:sequence>
                            <bpel:assign validate="no" name="AssignRuntimeFaultAction">
                                <bpel:copy>
                                    <bpel:from><bpel:literal xml:space="preserve"><tns:onRuntimeFaultReportResponse xmlns:tns="kr.co.smartylab" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:runtimeFaultResponse>OK</tns:runtimeFaultResponse>
</tns:onRuntimeFaultReportResponse>
</bpel:literal></bpel:from>
                                    <bpel:to variable="RuntimeFaultResponse" part="parameters"></bpel:to>
                                </bpel:copy>
                                
                            </bpel:assign>
                            <bpel:reply name="ReplyFaultActionToAdapter" partnerLink="client" operation="onRuntimeFaultReport" portType="tns:LongTermDemo" variable="RuntimeFaultResponse"></bpel:reply>
                            <bpel:assign validate="no" name="AssignActionInfo">
                                <bpel:copy>
                                    <bpel:from><bpel:literal><tns:cancel_action xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:callback_method_id>tns:callback_method_id</tns:callback_method_id>
  <tns:namespace>tns:namespace</tns:namespace>
</tns:cancel_action>
</bpel:literal></bpel:from>
                                    <bpel:to variable="ActionCancelRequest" part="parameters"></bpel:to>
                                </bpel:copy>
                                
                            </bpel:assign>
                            <bpel:invoke name="CancelAction" partnerLink="ConcertAdapterPL" operation="cancel_action" portType="ns:concert_adapter_soap_serverPortType" inputVariable="ActionCancelRequest" outputVariable="ActionCancelResponse"></bpel:invoke>
                            <bpel:exit name="TerminateBP2"></bpel:exit>
                        </bpel:sequence>
                    </bpel:else>
                
                    </bpel:if>
                </bpel:sequence>
            
            </bpel:onMessage>
            
            
            
            
        </bpel:pick>
        
    </bpel:sequence>
</bpel:process>

